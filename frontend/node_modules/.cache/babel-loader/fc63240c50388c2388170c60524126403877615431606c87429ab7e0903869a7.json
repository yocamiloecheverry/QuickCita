{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dae01\\\\Documents\\\\Universidad\\\\QuickCita\\\\frontend\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useContext, useEffect } from \"react\";\n// import { AuthContext } from \"../context/AuthContext\";\n// import { searchDoctors } from \"../services/doctorService\";\n// import {\n//   createAppointment,\n//   getAvailableSlots,\n// } from \"../services/appointmentService\";\n// import { getPerfilFilters } from \"../services/filterService\";\n// import AppNavbar from \"../components/Navbar\";\n// import Footer from \"../components/Footer\";\n// import CustomAlert from \"../components/CustomAlert\";\n// import CustomModal from \"../components/CustomModal\";\n// import \"../App.css\";\n// import {\n//   Container,\n//   Form,\n//   Row,\n//   Col,\n//   Card,\n//   Button,\n//   Spinner,\n//   Modal,\n// } from \"react-bootstrap\";\n\n// export default function Dashboard() {\n//   const { user } = useContext(AuthContext);\n\n//   // Filtros seleccionados\n//   const [filters, setFilters] = useState({\n//     especialidad: \"\",\n//     ubicacion: \"\",\n//     seguro_medico: \"\",\n//   });\n\n//   // Listas dinámicas de filtros\n//   const [especialidades, setEspecialidades] = useState([]);\n//   const [ubicaciones, setUbicaciones] = useState([]);\n//   const [seguros, setSeguros] = useState([]);\n\n//   // Resultados de búsqueda\n//   const [doctors, setDoctors] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   // Slots disponibles por médico\n//   const [slotsByDoctor, setSlotsByDoctor] = useState({});\n\n//   // Modal de agendamiento\n//   const [showModal, setShowModal] = useState(false);\n//   const [selectedDoctor, setSelectedDoctor] = useState(null);\n//   const [fechaHora, setFechaHora] = useState(\"\");\n//   const [notiMethod, setNotiMethod] = useState(\"email\");\n\n//   // Estados para alertas y modales personalizados\n//   const [alert, setAlert] = useState({\n//     show: false,\n//     message: \"\",\n//     variant: \"info\",\n//   });\n//   const [modal, setModal] = useState({\n//     show: false,\n//     title: \"\",\n//     body: \"\",\n//     onConfirm: null,\n//   });\n\n//   // Funciones para manejar alertas y modales\n//   const showAlert = (message, variant = \"info\") => {\n//     setAlert({ show: true, message, variant });\n//     setTimeout(\n//       () => setAlert({ show: false, message: \"\", variant: \"info\" }),\n//       4000\n//     );\n//   };\n\n//   const showConfirmModal = ({ title, body, onConfirm }) => {\n//     setModal({ show: true, title, body, onConfirm });\n//   };\n\n//   const handleModalConfirm = () => {\n//     if (modal.onConfirm) modal.onConfirm();\n//     setModal({ show: false, title: \"\", body: \"\", onConfirm: null });\n//   };\n\n//   const handleModalCancel = () => {\n//     setModal({ show: false, title: \"\", body: \"\", onConfirm: null });\n//   };\n\n//   // Cargar valores de filtros desde el backend\n//   useEffect(() => {\n//     getPerfilFilters()\n//       .then(({ especialidades: esp, ubicaciones: ubi, seguros: seg }) => {\n//         setEspecialidades(esp);\n//         setUbicaciones(ubi);\n//         setSeguros(seg);\n//       })\n//       .catch((err) => {\n//         console.error(\"Error cargando filtros:\", err);\n//         showAlert(\"Error al cargar los filtros de búsqueda\", \"danger\");\n//       });\n//   }, []);\n\n//   const handleFilterChange = (e) => {\n//     setFilters((f) => ({ ...f, [e.target.name]: e.target.value }));\n//   };\n\n//   // Manejar búsqueda de médicos\n//   const handleSearch = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n//     try {\n//       const docs = await searchDoctors(filters);\n//       setDoctors(docs);\n\n//       if (docs.length === 0) {\n//         showAlert(\n//           \"No se encontraron médicos con los filtros seleccionados\",\n//           \"warning\"\n//         );\n//         setSlotsByDoctor({});\n//         return;\n//       }\n\n//       // cargar slots para cada doctor\n//       const slotsMap = {};\n//       await Promise.all(\n//         docs.map(async (doc) => {\n//           const slots = await getAvailableSlots(doc.id_usuario);\n//           slotsMap[doc.id_usuario] = slots;\n//         })\n//       );\n//       setSlotsByDoctor(slotsMap);\n//       showAlert(`Se encontraron ${docs.length} médicos disponibles`, \"success\");\n//     } catch (err) {\n//       console.error(\"Error buscando médicos:\", err);\n//       showAlert(err.message || \"Error al buscar médicos\", \"danger\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const openModal = (doctor, slot) => {\n//     setSelectedDoctor(doctor);\n//     setFechaHora(slot);\n//     setShowModal(true);\n//   };\n\n//   // Manejar agendamiento de cita\n//   const handleAppointment = async () => {\n//     if (!fechaHora) {\n//       showAlert(\"Por favor selecciona fecha y hora\", \"warning\");\n//       return;\n//     }\n\n//     // Mostrar modal de confirmación\n//     showConfirmModal({\n//       title: \"Confirmar cita médica\",\n//       body: `¿Estás seguro de que deseas agendar una cita con Dr(a). ${\n//         selectedDoctor?.nombre\n//       } para el ${new Date(fechaHora).toLocaleString()}?`,\n//       onConfirm: () => confirmAppointment(),\n//     });\n//   };\n\n//   // Confirmar agendamiento de cita\n//   const confirmAppointment = async () => {\n//     try {\n//       await createAppointment({\n//         id_paciente: user.id_usuario,\n//         id_medico: selectedDoctor.id_usuario,\n//         fecha_hora: fechaHora,\n//         metodo_notificacion: notiMethod,\n//         seguro_medico: selectedDoctor.PerfilMedico?.seguro_medico || \"\",\n//       });\n//       showAlert(\n//         \"¡Cita agendada exitosamente! Recibirás una notificación de confirmación.\",\n//         \"success\"\n//       );\n//       setShowModal(false);\n\n//       // Actualizar slots disponibles para ese médico\n//       const updatedSlots = await getAvailableSlots(selectedDoctor.id_usuario);\n//       setSlotsByDoctor((prev) => ({\n//         ...prev,\n//         [selectedDoctor.id_usuario]: updatedSlots,\n//       }));\n//     } catch (err) {\n//       console.error(\"Error agendando cita:\", err);\n//       showAlert(\n//         err.message || \"Error al agendar la cita. Intenta nuevamente.\",\n//         \"danger\"\n//       );\n//     }\n//   };\n\n//   return (\n//     <>\n//       {/* Alertas personalizadas */}\n//       <CustomAlert\n//         show={alert.show}\n//         message={alert.message}\n//         variant={alert.variant}\n//         onClose={() => setAlert({ show: false, message: \"\", variant: \"info\" })}\n//       />\n\n//       {/* Modal personalizado */}\n//       <CustomModal\n//         show={modal.show}\n//         title={modal.title}\n//         body={modal.body}\n//         onConfirm={handleModalConfirm}\n//         onCancel={handleModalCancel}\n//       />\n\n//       <div className=\"app-layout\">\n//         <AppNavbar />\n//         <div className=\"app-content\">\n//           <Container className=\"py-5 d-flex flex-column\">\n//             <Form onSubmit={handleSearch}>\n//               <Row className=\"g-3\">\n//                 {/* Especialidad */}\n//                 <Col md>\n//                   <Form.Select\n//                     name=\"especialidad\"\n//                     value={filters.especialidad}\n//                     onChange={handleFilterChange}\n//                     className=\"stylish-select\"\n//                   >\n//                     <option value=\"\">-- Especialidad --</option>\n//                     {especialidades.map((sp) => (\n//                       <option key={sp} value={sp}>\n//                         {sp}\n//                       </option>\n//                     ))}\n//                   </Form.Select>\n//                 </Col>\n\n//                 {/* Ubicación */}\n//                 <Col md>\n//                   <Form.Select\n//                     name=\"ubicacion\"\n//                     value={filters.ubicacion}\n//                     onChange={handleFilterChange}\n//                     className=\"stylish-select\"\n//                   >\n//                     <option value=\"\">-- Ubicación --</option>\n//                     {ubicaciones.map((loc) => (\n//                       <option key={loc} value={loc}>\n//                         {loc}\n//                       </option>\n//                     ))}\n//                   </Form.Select>\n//                 </Col>\n\n//                 {/* Seguro médico */}\n//                 <Col md>\n//                   <Form.Select\n//                     name=\"seguro_medico\"\n//                     value={filters.seguro_medico}\n//                     onChange={handleFilterChange}\n//                     className=\"stylish-select\"\n//                   >\n//                     <option value=\"\">-- Seguro médico --</option>\n//                     {seguros.map((sg) => (\n//                       <option key={sg} value={sg}>\n//                         {sg}\n//                       </option>\n//                     ))}\n//                   </Form.Select>\n//                 </Col>\n\n//                 <Col md=\"auto\">\n//                   <Button type=\"submit\" disabled={loading}>\n//                     {loading ? (\n//                       <Spinner animation=\"border\" size=\"sm\" />\n//                     ) : (\n//                       \"Buscar\"\n//                     )}\n//                   </Button>\n//                 </Col>\n//               </Row>\n//             </Form>\n\n//             <Row className=\"mt-4 g-3\">\n//               {doctors.map((doc) => (\n//                 <Col key={doc.id_usuario} xs={12} md={6} lg={4}>\n//                   <Card className=\"h-100\">\n//                     <Card.Body>\n//                       <Card.Title>{doc.nombre}</Card.Title>\n//                       <Card.Text>\n//                         <strong>Especialidad:</strong>{\" \"}\n//                         {doc.PerfilMedico?.especialidad}\n//                         <br />\n//                         <strong>Ubicación:</strong>{\" \"}\n//                         {doc.PerfilMedico?.ubicacion}\n//                       </Card.Text>\n\n//                       {/* slots disponibles */}\n//                       <div style={{ maxHeight: 120, overflowY: \"auto\" }}>\n//                         {slotsByDoctor[doc.id_usuario]?.length > 0 ? (\n//                           slotsByDoctor[doc.id_usuario].map((slot) => (\n//                             <div\n//                               key={slot}\n//                               className=\"d-flex justify-content-between align-items-center mb-1\"\n//                             >\n//                               <small>{new Date(slot).toLocaleString()}</small>\n//                               <Button\n//                                 size=\"sm\"\n//                                 onClick={() => openModal(doc, slot)}\n//                               >\n//                                 Reservar\n//                               </Button>\n//                             </div>\n//                           ))\n//                         ) : (\n//                           <p className=\"text-muted\">\n//                             No hay horarios disponibles\n//                           </p>\n//                         )}\n//                       </div>\n//                     </Card.Body>\n//                   </Card>\n//                 </Col>\n//               ))}\n//             </Row>\n\n//             {/* Modal de agendamiento */}\n//             <Modal show={showModal} onHide={() => setShowModal(false)}>\n//               <Modal.Header closeButton>\n//                 <Modal.Title>Agendar con {selectedDoctor?.nombre}</Modal.Title>\n//               </Modal.Header>\n//               <Modal.Body>\n//                 <Form.Group className=\"mb-3\">\n//                   <Form.Label>Fecha y hora</Form.Label>\n//                   <Form.Control\n//                     type=\"text\"\n//                     readOnly\n//                     value={new Date(fechaHora).toLocaleString()}\n//                   />\n//                 </Form.Group>\n//                 <Form.Group className=\"mb-3\">\n//                   <Form.Label>Método de notificación</Form.Label>\n//                   <Form.Select\n//                     value={notiMethod}\n//                     onChange={(e) => setNotiMethod(e.target.value)}\n//                   >\n//                     <option value=\"email\">Email</option>\n//                     <option value=\"sms\">SMS</option>\n//                     <option value=\"ambos\">Email y SMS</option>\n//                   </Form.Select>\n//                 </Form.Group>\n//               </Modal.Body>\n//               <Modal.Footer>\n//                 <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n//                   Cancelar\n//                 </Button>\n//                 <Button variant=\"primary\" onClick={handleAppointment}>\n//                   Confirmar Cita\n//                 </Button>\n//               </Modal.Footer>\n//             </Modal>\n//           </Container>\n//         </div>\n//         <Footer />\n//       </div>\n//     </>\n//   );\n// }\n\n// frontend/src/pages/Dashboard.js\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { searchDoctors } from \"../services/doctorService\";\nimport { createAppointment, getAvailableSlots } from \"../services/appointmentService\";\nimport { getPerfilFilters } from \"../services/filterService\";\nimport socket from \"../socket\"; // <-- importamos el socket\nimport AppNavbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport CustomAlert from \"../components/CustomAlert\";\nimport CustomModal from \"../components/CustomModal\";\nimport \"../App.css\";\nimport { Container, Form, Row, Col, Card, Button, Spinner, Modal } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Dashboard() {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n\n  // ... tus states previos ...\n  const [filters, setFilters] = useState({\n    especialidad: \"\",\n    ubicacion: \"\",\n    seguro_medico: \"\"\n  });\n  const [especialidades, setEspecialidades] = useState([]);\n  const [ubicaciones, setUbicaciones] = useState([]);\n  const [seguros, setSeguros] = useState([]);\n  const [doctors, setDoctors] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [slotsByDoctor, setSlotsByDoctor] = useState({});\n  const [showModal, setShowModal] = useState(false);\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\n  const [fechaHora, setFechaHora] = useState(\"\");\n  const [notiMethod, setNotiMethod] = useState(\"email\");\n  const [alert, setAlert] = useState({\n    show: false,\n    message: \"\",\n    variant: \"info\"\n  });\n  const [modal, setModal] = useState({\n    show: false,\n    title: \"\",\n    body: \"\",\n    onConfirm: null\n  });\n\n  // Conexión a socket y escucha de 'appointmentCreated'\n  useEffect(() => {\n    if (!(user !== null && user !== void 0 && user.id_usuario)) return;\n\n    // Nos unimos al room en AuthContext, aquí solo escuchamos\n    socket.on(\"appointmentCreated\", ({\n      fecha_hora,\n      medico\n    }) => {\n      const msg = `📅 Tu cita con Dr(a). ${medico} para el ${fecha_hora} ha sido creada.`;\n      showAlert(msg, \"success\");\n    });\n    return () => {\n      socket.off(\"appointmentCreated\");\n    };\n  }, [user]);\n\n  // Funciones de alertas y modales\n  const showAlert = (message, variant = \"info\") => {\n    setAlert({\n      show: true,\n      message,\n      variant\n    });\n    setTimeout(() => setAlert({\n      show: false,\n      message: \"\",\n      variant: \"info\"\n    }), 4000);\n  };\n  const showConfirmModal = ({\n    title,\n    body,\n    onConfirm\n  }) => {\n    setModal({\n      show: true,\n      title,\n      body,\n      onConfirm\n    });\n  };\n  const handleModalConfirm = () => {\n    var _modal$onConfirm;\n    (_modal$onConfirm = modal.onConfirm) === null || _modal$onConfirm === void 0 ? void 0 : _modal$onConfirm.call(modal);\n    setModal({\n      show: false,\n      title: \"\",\n      body: \"\",\n      onConfirm: null\n    });\n  };\n  const handleModalCancel = () => {\n    setModal({\n      show: false,\n      title: \"\",\n      body: \"\",\n      onConfirm: null\n    });\n  };\n\n  // Carga inicial de filtros\n  useEffect(() => {\n    getPerfilFilters().then(({\n      especialidades: esp,\n      ubicaciones: ubi,\n      seguros: seg\n    }) => {\n      setEspecialidades(esp);\n      setUbicaciones(ubi);\n      setSeguros(seg);\n    }).catch(err => {\n      console.error(\"Error cargando filtros:\", err);\n      showAlert(\"Error al cargar los filtros de búsqueda\", \"danger\");\n    });\n  }, []);\n\n  // Resto de tus handlers (handleFilterChange, handleSearch, openModal, handleAppointment, confirmAppointment)...\n\n  const handleFilterChange = e => {\n    setFilters(f => ({\n      ...f,\n      [e.target.name]: e.target.value\n    }));\n  };\n  const handleSearch = async e => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      const docs = await searchDoctors(filters);\n      setDoctors(docs);\n      if (docs.length === 0) {\n        showAlert(\"No se encontraron médicos con esos filtros\", \"warning\");\n        setSlotsByDoctor({});\n        return;\n      }\n      const map = {};\n      await Promise.all(docs.map(async doc => {\n        map[doc.id_usuario] = await getAvailableSlots(doc.id_usuario);\n      }));\n      setSlotsByDoctor(map);\n      showAlert(`Se encontraron ${docs.length} médicos disponibles`, \"success\");\n    } catch (err) {\n      console.error(\"Error buscando médicos:\", err);\n      showAlert(err.message || \"Error al buscar médicos\", \"danger\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Abrir modal de agendamiento\n  const openModal = (doctor, slot) => {\n    setSelectedDoctor(doctor);\n    setFechaHora(slot);\n    setShowModal(true);\n  };\n\n  // Manejar agendamiento de cita\n  const handleAppointment = () => {\n    if (!fechaHora) {\n      showAlert(\"Selecciona fecha y hora\", \"warning\");\n      return;\n    }\n    showConfirmModal({\n      title: \"Confirmar cita médica\",\n      body: `¿Agendar cita con Dr(a). ${selectedDoctor.nombre} el ${new Date(fechaHora).toLocaleString()}?`,\n      onConfirm: confirmAppointment\n    });\n  };\n\n  // Confirmar agendamiento de cita\n  const confirmAppointment = async () => {\n    try {\n      var _selectedDoctor$Perfi;\n      await createAppointment({\n        id_paciente: user.id_usuario,\n        id_medico: selectedDoctor.id_usuario,\n        fecha_hora: fechaHora,\n        metodo_notificacion: notiMethod,\n        seguro_medico: ((_selectedDoctor$Perfi = selectedDoctor.PerfilMedico) === null || _selectedDoctor$Perfi === void 0 ? void 0 : _selectedDoctor$Perfi.seguro_medico) || \"\"\n      });\n      setShowModal(false);\n      showAlert(\"¡Cita agendada! - Revisa tu correo electronico\", \"success\");\n      // actualizar slots\n      const updated = await getAvailableSlots(selectedDoctor.id_usuario);\n      setSlotsByDoctor(prev => ({\n        ...prev,\n        [selectedDoctor.id_usuario]: updated\n      }));\n    } catch (err) {\n      console.error(\"Error agendando cita:\", err);\n      showAlert(err.message || \"Error al agendar cita\", \"danger\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CustomAlert, {\n      show: alert.show,\n      message: alert.message,\n      variant: alert.variant,\n      onClose: () => setAlert({\n        show: false,\n        message: \"\",\n        variant: \"info\"\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomModal, {\n      show: modal.show,\n      title: modal.title,\n      body: modal.body,\n      onConfirm: handleModalConfirm,\n      onCancel: handleModalCancel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-layout\",\n      children: [/*#__PURE__*/_jsxDEV(AppNavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-content\",\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          className: \"py-5 d-flex flex-column\",\n          children: [/*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: handleSearch,\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              className: \"g-3\",\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: true,\n                children: /*#__PURE__*/_jsxDEV(Form.Select, {\n                  name: \"especialidad\",\n                  value: filters.especialidad,\n                  onChange: handleFilterChange,\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"-- Especialidad --\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 569,\n                    columnNumber: 21\n                  }, this), especialidades.map(sp => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: sp,\n                    children: sp\n                  }, sp, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 571,\n                    columnNumber: 23\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 564,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 563,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: true,\n                children: /*#__PURE__*/_jsxDEV(Form.Select, {\n                  name: \"ubicacion\",\n                  value: filters.ubicacion,\n                  onChange: handleFilterChange,\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"-- Ubicaci\\xF3n --\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 581,\n                    columnNumber: 21\n                  }, this), ubicaciones.map(loc => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: loc,\n                    children: loc\n                  }, loc, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 583,\n                    columnNumber: 23\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 576,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 575,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: true,\n                children: /*#__PURE__*/_jsxDEV(Form.Select, {\n                  name: \"seguro_medico\",\n                  value: filters.seguro_medico,\n                  onChange: handleFilterChange,\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"-- Seguro m\\xE9dico --\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 593,\n                    columnNumber: 21\n                  }, this), seguros.map(sg => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: sg,\n                    children: sg\n                  }, sg, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 595,\n                    columnNumber: 23\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 588,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 587,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: \"auto\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  disabled: loading,\n                  children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n                    animation: \"border\",\n                    size: \"sm\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 601,\n                    columnNumber: 32\n                  }, this) : \"Buscar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 600,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 599,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            className: \"mt-4 g-3\",\n            children: doctors.map(doc => {\n              var _doc$PerfilMedico, _doc$PerfilMedico2, _slotsByDoctor$doc$id;\n              return /*#__PURE__*/_jsxDEV(Col, {\n                xs: 12,\n                md: 6,\n                lg: 4,\n                children: /*#__PURE__*/_jsxDEV(Card, {\n                  className: \"h-100\",\n                  children: /*#__PURE__*/_jsxDEV(Card.Body, {\n                    children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                      children: doc.nombre\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 613,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Especialidad:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 615,\n                        columnNumber: 25\n                      }, this), \" \", (_doc$PerfilMedico = doc.PerfilMedico) === null || _doc$PerfilMedico === void 0 ? void 0 : _doc$PerfilMedico.especialidad, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 615,\n                        columnNumber: 88\n                      }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Ubicaci\\xF3n:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 616,\n                        columnNumber: 25\n                      }, this), \" \", (_doc$PerfilMedico2 = doc.PerfilMedico) === null || _doc$PerfilMedico2 === void 0 ? void 0 : _doc$PerfilMedico2.ubicacion]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 614,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        maxHeight: 120,\n                        overflowY: \"auto\"\n                      },\n                      children: ((_slotsByDoctor$doc$id = slotsByDoctor[doc.id_usuario]) === null || _slotsByDoctor$doc$id === void 0 ? void 0 : _slotsByDoctor$doc$id.length) > 0 ? slotsByDoctor[doc.id_usuario].map(slot => /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"d-flex justify-content-between align-items-center mb-1\",\n                        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n                          children: new Date(slot).toLocaleString()\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 625,\n                          columnNumber: 31\n                        }, this), /*#__PURE__*/_jsxDEV(Button, {\n                          size: \"sm\",\n                          onClick: () => openModal(doc, slot),\n                          children: \"Reservar\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 626,\n                          columnNumber: 31\n                        }, this)]\n                      }, slot, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 621,\n                        columnNumber: 29\n                      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n                        className: \"text-muted\",\n                        children: \"No hay horarios disponibles\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 632,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 618,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 612,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 611,\n                  columnNumber: 19\n                }, this)\n              }, doc.id_usuario, false, {\n                fileName: _jsxFileName,\n                lineNumber: 610,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Modal, {\n            show: showModal,\n            onHide: () => setShowModal(false),\n            children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n              closeButton: true,\n              children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n                children: [\"Agendar con \", selectedDoctor === null || selectedDoctor === void 0 ? void 0 : selectedDoctor.nombre]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 644,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 643,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Fecha y hora\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 648,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  readOnly: true,\n                  value: new Date(fechaHora).toLocaleString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 649,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 647,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"M\\xE9todo de notificaci\\xF3n\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 656,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n                  value: notiMethod,\n                  onChange: e => setNotiMethod(e.target.value),\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"email\",\n                    children: \"Email\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 661,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"sms\",\n                    children: \"SMS\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 662,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"both\",\n                    children: \"Email y SMS\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 663,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 657,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 655,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 646,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"secondary\",\n                onClick: () => setShowModal(false),\n                children: \"Cancelar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 668,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                onClick: handleAppointment,\n                children: \"Confirmar Cita\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 671,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 667,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 642,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Dashboard, \"qKsYp96FqgllxU1zBgAYoSsLaWk=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useContext","useEffect","AuthContext","searchDoctors","createAppointment","getAvailableSlots","getPerfilFilters","socket","AppNavbar","Footer","CustomAlert","CustomModal","Container","Form","Row","Col","Card","Button","Spinner","Modal","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","user","filters","setFilters","especialidad","ubicacion","seguro_medico","especialidades","setEspecialidades","ubicaciones","setUbicaciones","seguros","setSeguros","doctors","setDoctors","loading","setLoading","slotsByDoctor","setSlotsByDoctor","showModal","setShowModal","selectedDoctor","setSelectedDoctor","fechaHora","setFechaHora","notiMethod","setNotiMethod","alert","setAlert","show","message","variant","modal","setModal","title","body","onConfirm","id_usuario","on","fecha_hora","medico","msg","showAlert","off","setTimeout","showConfirmModal","handleModalConfirm","_modal$onConfirm","call","handleModalCancel","then","esp","ubi","seg","catch","err","console","error","handleFilterChange","e","f","target","name","value","handleSearch","preventDefault","docs","length","map","Promise","all","doc","openModal","doctor","slot","handleAppointment","nombre","Date","toLocaleString","confirmAppointment","_selectedDoctor$Perfi","id_paciente","id_medico","metodo_notificacion","PerfilMedico","updated","prev","children","onClose","fileName","_jsxFileName","lineNumber","columnNumber","onCancel","className","onSubmit","md","Select","onChange","sp","loc","sg","type","disabled","animation","size","_doc$PerfilMedico","_doc$PerfilMedico2","_slotsByDoctor$doc$id","xs","lg","Body","Title","Text","style","maxHeight","overflowY","onClick","onHide","Header","closeButton","Group","Label","Control","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/dae01/Documents/Universidad/QuickCita/frontend/src/pages/Dashboard.js"],"sourcesContent":["// import React, { useState, useContext, useEffect } from \"react\";\r\n// import { AuthContext } from \"../context/AuthContext\";\r\n// import { searchDoctors } from \"../services/doctorService\";\r\n// import {\r\n//   createAppointment,\r\n//   getAvailableSlots,\r\n// } from \"../services/appointmentService\";\r\n// import { getPerfilFilters } from \"../services/filterService\";\r\n// import AppNavbar from \"../components/Navbar\";\r\n// import Footer from \"../components/Footer\";\r\n// import CustomAlert from \"../components/CustomAlert\";\r\n// import CustomModal from \"../components/CustomModal\";\r\n// import \"../App.css\";\r\n// import {\r\n//   Container,\r\n//   Form,\r\n//   Row,\r\n//   Col,\r\n//   Card,\r\n//   Button,\r\n//   Spinner,\r\n//   Modal,\r\n// } from \"react-bootstrap\";\r\n\r\n// export default function Dashboard() {\r\n//   const { user } = useContext(AuthContext);\r\n\r\n//   // Filtros seleccionados\r\n//   const [filters, setFilters] = useState({\r\n//     especialidad: \"\",\r\n//     ubicacion: \"\",\r\n//     seguro_medico: \"\",\r\n//   });\r\n\r\n//   // Listas dinámicas de filtros\r\n//   const [especialidades, setEspecialidades] = useState([]);\r\n//   const [ubicaciones, setUbicaciones] = useState([]);\r\n//   const [seguros, setSeguros] = useState([]);\r\n\r\n//   // Resultados de búsqueda\r\n//   const [doctors, setDoctors] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n//   // Slots disponibles por médico\r\n//   const [slotsByDoctor, setSlotsByDoctor] = useState({});\r\n\r\n//   // Modal de agendamiento\r\n//   const [showModal, setShowModal] = useState(false);\r\n//   const [selectedDoctor, setSelectedDoctor] = useState(null);\r\n//   const [fechaHora, setFechaHora] = useState(\"\");\r\n//   const [notiMethod, setNotiMethod] = useState(\"email\");\r\n\r\n//   // Estados para alertas y modales personalizados\r\n//   const [alert, setAlert] = useState({\r\n//     show: false,\r\n//     message: \"\",\r\n//     variant: \"info\",\r\n//   });\r\n//   const [modal, setModal] = useState({\r\n//     show: false,\r\n//     title: \"\",\r\n//     body: \"\",\r\n//     onConfirm: null,\r\n//   });\r\n\r\n//   // Funciones para manejar alertas y modales\r\n//   const showAlert = (message, variant = \"info\") => {\r\n//     setAlert({ show: true, message, variant });\r\n//     setTimeout(\r\n//       () => setAlert({ show: false, message: \"\", variant: \"info\" }),\r\n//       4000\r\n//     );\r\n//   };\r\n\r\n//   const showConfirmModal = ({ title, body, onConfirm }) => {\r\n//     setModal({ show: true, title, body, onConfirm });\r\n//   };\r\n\r\n//   const handleModalConfirm = () => {\r\n//     if (modal.onConfirm) modal.onConfirm();\r\n//     setModal({ show: false, title: \"\", body: \"\", onConfirm: null });\r\n//   };\r\n\r\n//   const handleModalCancel = () => {\r\n//     setModal({ show: false, title: \"\", body: \"\", onConfirm: null });\r\n//   };\r\n\r\n//   // Cargar valores de filtros desde el backend\r\n//   useEffect(() => {\r\n//     getPerfilFilters()\r\n//       .then(({ especialidades: esp, ubicaciones: ubi, seguros: seg }) => {\r\n//         setEspecialidades(esp);\r\n//         setUbicaciones(ubi);\r\n//         setSeguros(seg);\r\n//       })\r\n//       .catch((err) => {\r\n//         console.error(\"Error cargando filtros:\", err);\r\n//         showAlert(\"Error al cargar los filtros de búsqueda\", \"danger\");\r\n//       });\r\n//   }, []);\r\n\r\n//   const handleFilterChange = (e) => {\r\n//     setFilters((f) => ({ ...f, [e.target.name]: e.target.value }));\r\n//   };\r\n\r\n//   // Manejar búsqueda de médicos\r\n//   const handleSearch = async (e) => {\r\n//     e.preventDefault();\r\n//     setLoading(true);\r\n//     try {\r\n//       const docs = await searchDoctors(filters);\r\n//       setDoctors(docs);\r\n\r\n//       if (docs.length === 0) {\r\n//         showAlert(\r\n//           \"No se encontraron médicos con los filtros seleccionados\",\r\n//           \"warning\"\r\n//         );\r\n//         setSlotsByDoctor({});\r\n//         return;\r\n//       }\r\n\r\n//       // cargar slots para cada doctor\r\n//       const slotsMap = {};\r\n//       await Promise.all(\r\n//         docs.map(async (doc) => {\r\n//           const slots = await getAvailableSlots(doc.id_usuario);\r\n//           slotsMap[doc.id_usuario] = slots;\r\n//         })\r\n//       );\r\n//       setSlotsByDoctor(slotsMap);\r\n//       showAlert(`Se encontraron ${docs.length} médicos disponibles`, \"success\");\r\n//     } catch (err) {\r\n//       console.error(\"Error buscando médicos:\", err);\r\n//       showAlert(err.message || \"Error al buscar médicos\", \"danger\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const openModal = (doctor, slot) => {\r\n//     setSelectedDoctor(doctor);\r\n//     setFechaHora(slot);\r\n//     setShowModal(true);\r\n//   };\r\n  \r\n//   // Manejar agendamiento de cita\r\n//   const handleAppointment = async () => {\r\n//     if (!fechaHora) {\r\n//       showAlert(\"Por favor selecciona fecha y hora\", \"warning\");\r\n//       return;\r\n//     }\r\n\r\n//     // Mostrar modal de confirmación\r\n//     showConfirmModal({\r\n//       title: \"Confirmar cita médica\",\r\n//       body: `¿Estás seguro de que deseas agendar una cita con Dr(a). ${\r\n//         selectedDoctor?.nombre\r\n//       } para el ${new Date(fechaHora).toLocaleString()}?`,\r\n//       onConfirm: () => confirmAppointment(),\r\n//     });\r\n//   };\r\n\r\n//   // Confirmar agendamiento de cita\r\n//   const confirmAppointment = async () => {\r\n//     try {\r\n//       await createAppointment({\r\n//         id_paciente: user.id_usuario,\r\n//         id_medico: selectedDoctor.id_usuario,\r\n//         fecha_hora: fechaHora,\r\n//         metodo_notificacion: notiMethod,\r\n//         seguro_medico: selectedDoctor.PerfilMedico?.seguro_medico || \"\",\r\n//       });\r\n//       showAlert(\r\n//         \"¡Cita agendada exitosamente! Recibirás una notificación de confirmación.\",\r\n//         \"success\"\r\n//       );\r\n//       setShowModal(false);\r\n\r\n//       // Actualizar slots disponibles para ese médico\r\n//       const updatedSlots = await getAvailableSlots(selectedDoctor.id_usuario);\r\n//       setSlotsByDoctor((prev) => ({\r\n//         ...prev,\r\n//         [selectedDoctor.id_usuario]: updatedSlots,\r\n//       }));\r\n//     } catch (err) {\r\n//       console.error(\"Error agendando cita:\", err);\r\n//       showAlert(\r\n//         err.message || \"Error al agendar la cita. Intenta nuevamente.\",\r\n//         \"danger\"\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       {/* Alertas personalizadas */}\r\n//       <CustomAlert\r\n//         show={alert.show}\r\n//         message={alert.message}\r\n//         variant={alert.variant}\r\n//         onClose={() => setAlert({ show: false, message: \"\", variant: \"info\" })}\r\n//       />\r\n\r\n//       {/* Modal personalizado */}\r\n//       <CustomModal\r\n//         show={modal.show}\r\n//         title={modal.title}\r\n//         body={modal.body}\r\n//         onConfirm={handleModalConfirm}\r\n//         onCancel={handleModalCancel}\r\n//       />\r\n\r\n//       <div className=\"app-layout\">\r\n//         <AppNavbar />\r\n//         <div className=\"app-content\">\r\n//           <Container className=\"py-5 d-flex flex-column\">\r\n//             <Form onSubmit={handleSearch}>\r\n//               <Row className=\"g-3\">\r\n//                 {/* Especialidad */}\r\n//                 <Col md>\r\n//                   <Form.Select\r\n//                     name=\"especialidad\"\r\n//                     value={filters.especialidad}\r\n//                     onChange={handleFilterChange}\r\n//                     className=\"stylish-select\"\r\n//                   >\r\n//                     <option value=\"\">-- Especialidad --</option>\r\n//                     {especialidades.map((sp) => (\r\n//                       <option key={sp} value={sp}>\r\n//                         {sp}\r\n//                       </option>\r\n//                     ))}\r\n//                   </Form.Select>\r\n//                 </Col>\r\n\r\n//                 {/* Ubicación */}\r\n//                 <Col md>\r\n//                   <Form.Select\r\n//                     name=\"ubicacion\"\r\n//                     value={filters.ubicacion}\r\n//                     onChange={handleFilterChange}\r\n//                     className=\"stylish-select\"\r\n//                   >\r\n//                     <option value=\"\">-- Ubicación --</option>\r\n//                     {ubicaciones.map((loc) => (\r\n//                       <option key={loc} value={loc}>\r\n//                         {loc}\r\n//                       </option>\r\n//                     ))}\r\n//                   </Form.Select>\r\n//                 </Col>\r\n\r\n//                 {/* Seguro médico */}\r\n//                 <Col md>\r\n//                   <Form.Select\r\n//                     name=\"seguro_medico\"\r\n//                     value={filters.seguro_medico}\r\n//                     onChange={handleFilterChange}\r\n//                     className=\"stylish-select\"\r\n//                   >\r\n//                     <option value=\"\">-- Seguro médico --</option>\r\n//                     {seguros.map((sg) => (\r\n//                       <option key={sg} value={sg}>\r\n//                         {sg}\r\n//                       </option>\r\n//                     ))}\r\n//                   </Form.Select>\r\n//                 </Col>\r\n\r\n//                 <Col md=\"auto\">\r\n//                   <Button type=\"submit\" disabled={loading}>\r\n//                     {loading ? (\r\n//                       <Spinner animation=\"border\" size=\"sm\" />\r\n//                     ) : (\r\n//                       \"Buscar\"\r\n//                     )}\r\n//                   </Button>\r\n//                 </Col>\r\n//               </Row>\r\n//             </Form>\r\n\r\n//             <Row className=\"mt-4 g-3\">\r\n//               {doctors.map((doc) => (\r\n//                 <Col key={doc.id_usuario} xs={12} md={6} lg={4}>\r\n//                   <Card className=\"h-100\">\r\n//                     <Card.Body>\r\n//                       <Card.Title>{doc.nombre}</Card.Title>\r\n//                       <Card.Text>\r\n//                         <strong>Especialidad:</strong>{\" \"}\r\n//                         {doc.PerfilMedico?.especialidad}\r\n//                         <br />\r\n//                         <strong>Ubicación:</strong>{\" \"}\r\n//                         {doc.PerfilMedico?.ubicacion}\r\n//                       </Card.Text>\r\n\r\n//                       {/* slots disponibles */}\r\n//                       <div style={{ maxHeight: 120, overflowY: \"auto\" }}>\r\n//                         {slotsByDoctor[doc.id_usuario]?.length > 0 ? (\r\n//                           slotsByDoctor[doc.id_usuario].map((slot) => (\r\n//                             <div\r\n//                               key={slot}\r\n//                               className=\"d-flex justify-content-between align-items-center mb-1\"\r\n//                             >\r\n//                               <small>{new Date(slot).toLocaleString()}</small>\r\n//                               <Button\r\n//                                 size=\"sm\"\r\n//                                 onClick={() => openModal(doc, slot)}\r\n//                               >\r\n//                                 Reservar\r\n//                               </Button>\r\n//                             </div>\r\n//                           ))\r\n//                         ) : (\r\n//                           <p className=\"text-muted\">\r\n//                             No hay horarios disponibles\r\n//                           </p>\r\n//                         )}\r\n//                       </div>\r\n//                     </Card.Body>\r\n//                   </Card>\r\n//                 </Col>\r\n//               ))}\r\n//             </Row>\r\n\r\n//             {/* Modal de agendamiento */}\r\n//             <Modal show={showModal} onHide={() => setShowModal(false)}>\r\n//               <Modal.Header closeButton>\r\n//                 <Modal.Title>Agendar con {selectedDoctor?.nombre}</Modal.Title>\r\n//               </Modal.Header>\r\n//               <Modal.Body>\r\n//                 <Form.Group className=\"mb-3\">\r\n//                   <Form.Label>Fecha y hora</Form.Label>\r\n//                   <Form.Control\r\n//                     type=\"text\"\r\n//                     readOnly\r\n//                     value={new Date(fechaHora).toLocaleString()}\r\n//                   />\r\n//                 </Form.Group>\r\n//                 <Form.Group className=\"mb-3\">\r\n//                   <Form.Label>Método de notificación</Form.Label>\r\n//                   <Form.Select\r\n//                     value={notiMethod}\r\n//                     onChange={(e) => setNotiMethod(e.target.value)}\r\n//                   >\r\n//                     <option value=\"email\">Email</option>\r\n//                     <option value=\"sms\">SMS</option>\r\n//                     <option value=\"ambos\">Email y SMS</option>\r\n//                   </Form.Select>\r\n//                 </Form.Group>\r\n//               </Modal.Body>\r\n//               <Modal.Footer>\r\n//                 <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\r\n//                   Cancelar\r\n//                 </Button>\r\n//                 <Button variant=\"primary\" onClick={handleAppointment}>\r\n//                   Confirmar Cita\r\n//                 </Button>\r\n//               </Modal.Footer>\r\n//             </Modal>\r\n//           </Container>\r\n//         </div>\r\n//         <Footer />\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// frontend/src/pages/Dashboard.js\r\nimport React, { useState, useContext, useEffect } from \"react\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\nimport { searchDoctors } from \"../services/doctorService\";\r\nimport {\r\n  createAppointment,\r\n  getAvailableSlots,\r\n} from \"../services/appointmentService\";\r\nimport { getPerfilFilters } from \"../services/filterService\";\r\nimport socket from \"../socket\";            // <-- importamos el socket\r\nimport AppNavbar from \"../components/Navbar\";\r\nimport Footer from \"../components/Footer\";\r\nimport CustomAlert from \"../components/CustomAlert\";\r\nimport CustomModal from \"../components/CustomModal\";\r\nimport \"../App.css\";\r\nimport {\r\n  Container,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Button,\r\n  Spinner,\r\n  Modal,\r\n} from \"react-bootstrap\";\r\n\r\nexport default function Dashboard() {\r\n  const { user } = useContext(AuthContext);\r\n\r\n  // ... tus states previos ...\r\n  const [filters, setFilters] = useState({\r\n    especialidad: \"\",\r\n    ubicacion: \"\",\r\n    seguro_medico: \"\",\r\n  });\r\n  const [especialidades, setEspecialidades] = useState([]);\r\n  const [ubicaciones, setUbicaciones] = useState([]);\r\n  const [seguros, setSeguros] = useState([]);\r\n  const [doctors, setDoctors] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [slotsByDoctor, setSlotsByDoctor] = useState({});\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\r\n  const [fechaHora, setFechaHora] = useState(\"\");\r\n  const [notiMethod, setNotiMethod] = useState(\"email\");\r\n  const [alert, setAlert] = useState({ show: false, message: \"\", variant: \"info\" });\r\n  const [modal, setModal] = useState({ show: false, title: \"\", body: \"\", onConfirm: null });\r\n\r\n  // Conexión a socket y escucha de 'appointmentCreated'\r\n  useEffect(() => {\r\n    if (!user?.id_usuario) return;\r\n\r\n    // Nos unimos al room en AuthContext, aquí solo escuchamos\r\n    socket.on(\"appointmentCreated\", ({ fecha_hora, medico }) => {\r\n      const msg = `📅 Tu cita con Dr(a). ${medico} para el ${fecha_hora} ha sido creada.`;\r\n      showAlert(msg, \"success\");\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"appointmentCreated\");\r\n    };\r\n  }, [user]);\r\n\r\n  // Funciones de alertas y modales\r\n  const showAlert = (message, variant = \"info\") => {\r\n    setAlert({ show: true, message, variant });\r\n    setTimeout(() => setAlert({ show: false, message: \"\", variant: \"info\" }), 4000);\r\n  };\r\n  const showConfirmModal = ({ title, body, onConfirm }) => {\r\n    setModal({ show: true, title, body, onConfirm });\r\n  };\r\n  const handleModalConfirm = () => {\r\n    modal.onConfirm?.();\r\n    setModal({ show: false, title: \"\", body: \"\", onConfirm: null });\r\n  };\r\n  const handleModalCancel = () => {\r\n    setModal({ show: false, title: \"\", body: \"\", onConfirm: null });\r\n  };\r\n\r\n  // Carga inicial de filtros\r\n  useEffect(() => {\r\n    getPerfilFilters()\r\n      .then(({ especialidades: esp, ubicaciones: ubi, seguros: seg }) => {\r\n        setEspecialidades(esp);\r\n        setUbicaciones(ubi);\r\n        setSeguros(seg);\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Error cargando filtros:\", err);\r\n        showAlert(\"Error al cargar los filtros de búsqueda\", \"danger\");\r\n      });\r\n  }, []);\r\n\r\n  // Resto de tus handlers (handleFilterChange, handleSearch, openModal, handleAppointment, confirmAppointment)...\r\n\r\n  const handleFilterChange = (e) => {\r\n    setFilters((f) => ({ ...f, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  \r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    try {\r\n      const docs = await searchDoctors(filters);\r\n      setDoctors(docs);\r\n      if (docs.length === 0) {\r\n        showAlert(\"No se encontraron médicos con esos filtros\", \"warning\");\r\n        setSlotsByDoctor({});\r\n        return;\r\n      }\r\n      const map = {};\r\n      await Promise.all(\r\n        docs.map(async (doc) => {\r\n          map[doc.id_usuario] = await getAvailableSlots(doc.id_usuario);\r\n        })\r\n      );\r\n      setSlotsByDoctor(map);\r\n      showAlert(`Se encontraron ${docs.length} médicos disponibles`, \"success\");\r\n    } catch (err) {\r\n      console.error(\"Error buscando médicos:\", err);\r\n      showAlert(err.message || \"Error al buscar médicos\", \"danger\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Abrir modal de agendamiento\r\n  const openModal = (doctor, slot) => {\r\n    setSelectedDoctor(doctor);\r\n    setFechaHora(slot);\r\n    setShowModal(true);\r\n  };\r\n\r\n  // Manejar agendamiento de cita\r\n  const handleAppointment = () => {\r\n    if (!fechaHora) {\r\n      showAlert(\"Selecciona fecha y hora\", \"warning\");\r\n      return;\r\n    }\r\n    showConfirmModal({\r\n      title: \"Confirmar cita médica\",\r\n      body: `¿Agendar cita con Dr(a). ${selectedDoctor.nombre} el ${new Date(fechaHora).toLocaleString()}?`,\r\n      onConfirm: confirmAppointment,\r\n    });\r\n  };\r\n\r\n  // Confirmar agendamiento de cita\r\n  const confirmAppointment = async () => {\r\n    try {\r\n      await createAppointment({\r\n        id_paciente: user.id_usuario,\r\n        id_medico: selectedDoctor.id_usuario,\r\n        fecha_hora: fechaHora,\r\n        metodo_notificacion: notiMethod,\r\n        seguro_medico: selectedDoctor.PerfilMedico?.seguro_medico || \"\",\r\n      });\r\n      setShowModal(false);\r\n      showAlert(\"¡Cita agendada! - Revisa tu correo electronico\", \"success\");\r\n      // actualizar slots\r\n      const updated = await getAvailableSlots(selectedDoctor.id_usuario);\r\n      setSlotsByDoctor((prev) => ({\r\n        ...prev,\r\n        [selectedDoctor.id_usuario]: updated,\r\n      }));\r\n    } catch (err) {\r\n      console.error(\"Error agendando cita:\", err);\r\n      showAlert(err.message || \"Error al agendar cita\", \"danger\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CustomAlert\r\n        show={alert.show}\r\n        message={alert.message}\r\n        variant={alert.variant}\r\n        onClose={() => setAlert({ show: false, message: \"\", variant: \"info\" })}\r\n      />\r\n      <CustomModal\r\n        show={modal.show}\r\n        title={modal.title}\r\n        body={modal.body}\r\n        onConfirm={handleModalConfirm}\r\n        onCancel={handleModalCancel}\r\n      />\r\n\r\n      <div className=\"app-layout\">\r\n        <AppNavbar />\r\n        <div className=\"app-content\">\r\n          <Container className=\"py-5 d-flex flex-column\">\r\n            {/* Form de filtros */}\r\n            <Form onSubmit={handleSearch}>\r\n              <Row className=\"g-3\">\r\n                <Col md>\r\n                  <Form.Select\r\n                    name=\"especialidad\"\r\n                    value={filters.especialidad}\r\n                    onChange={handleFilterChange}\r\n                  >\r\n                    <option value=\"\">-- Especialidad --</option>\r\n                    {especialidades.map((sp) => (\r\n                      <option key={sp} value={sp}>{sp}</option>\r\n                    ))}\r\n                  </Form.Select>\r\n                </Col>\r\n                <Col md>\r\n                  <Form.Select\r\n                    name=\"ubicacion\"\r\n                    value={filters.ubicacion}\r\n                    onChange={handleFilterChange}\r\n                  >\r\n                    <option value=\"\">-- Ubicación --</option>\r\n                    {ubicaciones.map((loc) => (\r\n                      <option key={loc} value={loc}>{loc}</option>\r\n                    ))}\r\n                  </Form.Select>\r\n                </Col>\r\n                <Col md>\r\n                  <Form.Select\r\n                    name=\"seguro_medico\"\r\n                    value={filters.seguro_medico}\r\n                    onChange={handleFilterChange}\r\n                  >\r\n                    <option value=\"\">-- Seguro médico --</option>\r\n                    {seguros.map((sg) => (\r\n                      <option key={sg} value={sg}>{sg}</option>\r\n                    ))}\r\n                  </Form.Select>\r\n                </Col>\r\n                <Col md=\"auto\">\r\n                  <Button type=\"submit\" disabled={loading}>\r\n                    {loading ? <Spinner animation=\"border\" size=\"sm\" /> : \"Buscar\"}\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n\r\n            {/* Lista de doctores y sus slots */}\r\n            <Row className=\"mt-4 g-3\">\r\n              {doctors.map((doc) => (\r\n                <Col key={doc.id_usuario} xs={12} md={6} lg={4}>\r\n                  <Card className=\"h-100\">\r\n                    <Card.Body>\r\n                      <Card.Title>{doc.nombre}</Card.Title>\r\n                      <Card.Text>\r\n                        <strong>Especialidad:</strong> {doc.PerfilMedico?.especialidad}<br />\r\n                        <strong>Ubicación:</strong> {doc.PerfilMedico?.ubicacion}\r\n                      </Card.Text>\r\n                      <div style={{ maxHeight: 120, overflowY: \"auto\" }}>\r\n                        {slotsByDoctor[doc.id_usuario]?.length > 0 ? (\r\n                          slotsByDoctor[doc.id_usuario].map((slot) => (\r\n                            <div\r\n                              key={slot}\r\n                              className=\"d-flex justify-content-between align-items-center mb-1\"\r\n                            >\r\n                              <small>{new Date(slot).toLocaleString()}</small>\r\n                              <Button size=\"sm\" onClick={() => openModal(doc, slot)}>\r\n                                Reservar\r\n                              </Button>\r\n                            </div>\r\n                          ))\r\n                        ) : (\r\n                          <p className=\"text-muted\">No hay horarios disponibles</p>\r\n                        )}\r\n                      </div>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n              ))}\r\n            </Row>\r\n\r\n            {/* Modal inline para agendar */}\r\n            <Modal show={showModal} onHide={() => setShowModal(false)}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Agendar con {selectedDoctor?.nombre}</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <Form.Group className=\"mb-3\">\r\n                  <Form.Label>Fecha y hora</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    readOnly\r\n                    value={new Date(fechaHora).toLocaleString()}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\">\r\n                  <Form.Label>Método de notificación</Form.Label>\r\n                  <Form.Select\r\n                    value={notiMethod}\r\n                    onChange={(e) => setNotiMethod(e.target.value)}\r\n                  >\r\n                    <option value=\"email\">Email</option>\r\n                    <option value=\"sms\">SMS</option>\r\n                    <option value=\"both\">Email y SMS</option>\r\n                  </Form.Select>\r\n                </Form.Group>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\r\n                  Cancelar\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={handleAppointment}>\r\n                  Confirmar Cita\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </Container>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SACEC,iBAAiB,EACjBC,iBAAiB,QACZ,gCAAgC;AACvC,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,OAAOC,MAAM,MAAM,WAAW,CAAC,CAAY;AAC3C,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAO,YAAY;AACnB,SACEC,SAAS,EACTC,IAAI,EACJC,GAAG,EACHC,GAAG,EACHC,IAAI,EACJC,MAAM,EACNC,OAAO,EACPC,KAAK,QACA,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEzB,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAClC,MAAM;IAAEC;EAAK,CAAC,GAAG1B,UAAU,CAACE,WAAW,CAAC;;EAExC;EACA,MAAM,CAACyB,OAAO,EAAEC,UAAU,CAAC,GAAG7B,QAAQ,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}