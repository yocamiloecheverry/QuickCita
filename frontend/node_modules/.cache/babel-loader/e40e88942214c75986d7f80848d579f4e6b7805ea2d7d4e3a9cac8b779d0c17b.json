{"ast":null,"code":"// import React, { useState, useContext, useEffect } from \"react\";\n// import { AuthContext } from \"../context/AuthContext\";\n// import { searchDoctors } from \"../services/doctorService\";\n// import {\n//   createAppointment,\n//   getAvailableSlots,\n// } from \"../services/appointmentService\";\n// import { getPerfilFilters } from \"../services/filterService\";\n// import AppNavbar from \"../components/Navbar\";\n// import Footer from \"../components/Footer\";\n// import \"../App.css\";\n// import {\n//   Container,\n//   Form,\n//   Row,\n//   Col,\n//   Card,\n//   Button,\n//   Spinner,\n//   Modal,\n// } from \"react-bootstrap\";\n\n// export default function Dashboard() {\n//   const { user } = useContext(AuthContext);\n\n//   // Filtros seleccionados\n//   const [filters, setFilters] = useState({\n//     especialidad: \"\",\n//     ubicacion: \"\",\n//     seguro_medico: \"\",\n//   });\n\n//   // Listas dinámicas de filtros\n//   const [especialidades, setEspecialidades] = useState([]);\n//   const [ubicaciones, setUbicaciones] = useState([]);\n//   const [seguros, setSeguros] = useState([]);\n\n//   // Resultados de búsqueda\n//   const [doctors, setDoctors] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   // Slots disponibles por médico\n//   const [slotsByDoctor, setSlotsByDoctor] = useState({});\n\n//   // Modal de agendamiento\n//   const [showModal, setShowModal] = useState(false);\n//   const [selectedDoctor, setSelectedDoctor] = useState(null);\n//   const [fechaHora, setFechaHora] = useState(\"\");\n//   const [notiMethod, setNotiMethod] = useState(\"email\");\n\n//   // Cargar valores de filtros desde el backend\n//   useEffect(() => {\n//     getPerfilFilters()\n//       .then(({ especialidades: esp, ubicaciones: ubi, seguros: seg }) => {\n//         setEspecialidades(esp);\n//         setUbicaciones(ubi);\n//         setSeguros(seg);\n//       })\n//       .catch((err) => console.error(\"Error cargando filtros:\", err));\n//   }, []);\n\n//   const handleFilterChange = (e) => {\n//     setFilters((f) => ({ ...f, [e.target.name]: e.target.value }));\n//   };\n\n//   const handleSearch = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n//     try {\n//       const docs = await searchDoctors(filters);\n//       setDoctors(docs);\n\n//       // cargar slots para cada doctor\n//       const slotsMap = {};\n//       await Promise.all(\n//         docs.map(async (doc) => {\n//           const slots = await getAvailableSlots(doc.id_usuario);\n//           slotsMap[doc.id_usuario] = slots;\n//         })\n//       );\n//       setSlotsByDoctor(slotsMap);\n//     } catch (err) {\n//       console.error(\"Error buscando médicos:\", err);\n//       alert(err.message || \"Error al buscar médicos\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const openModal = (doctor, slot) => {\n//     setSelectedDoctor(doctor);\n//     setFechaHora(slot);\n//     setShowModal(true);\n//   };\n\n//   const handleAppointment = async () => {\n//     if (!fechaHora) {\n//       alert(\"Por favor selecciona fecha y hora\");\n//       return;\n//     }\n//     try {\n//       await createAppointment({\n//         id_paciente: user.id_usuario,\n//         id_medico: selectedDoctor.id_usuario,\n//         fecha_hora: fechaHora,\n//         metodo_notificacion: notiMethod,\n//         seguro_medico: selectedDoctor.PerfilMedico?.seguro_medico || \"\",\n//       });\n//       alert(\"Cita agendada con éxito\");\n//       setShowModal(false);\n//     } catch (err) {\n//       console.error(\"Error agendando cita:\", err);\n//       alert(err.message || \"Error al agendar cita\");\n//     }\n//   };\n\n//   return (\n//     <>\n//       <div className=\"app-layout\">\n//         <AppNavbar />\n//         <div className=\"app-content\">\n//           <Container className=\"py-5 d-flex flex-column\">\n//             <Form onSubmit={handleSearch}>\n//               <Row className=\"g-3\">\n//                 {/* Especialidad */}\n//                 <Col md>\n//                   <Form.Select\n//                     name=\"especialidad\"\n//                     value={filters.especialidad}\n//                     onChange={handleFilterChange}\n//                     className=\"stylish-select\"  \n//                   >\n//                     <option value=\"\">-- Especialidad --</option>\n//                     {especialidades.map((sp) => (\n//                       <option key={sp} value={sp}>\n//                         {sp}\n//                       </option>\n//                     ))}\n//                   </Form.Select>\n//                 </Col>\n\n//                 {/* Ubicación */}\n//                 <Col md>\n//                   <Form.Select\n//                     name=\"ubicacion\"\n//                     value={filters.ubicacion}\n//                     onChange={handleFilterChange}\n//                     className=\"stylish-select\"\n//                   >\n//                     <option value=\"\">-- Ubicación --</option>\n//                     {ubicaciones.map((loc) => (\n//                       <option key={loc} value={loc}>\n//                         {loc}\n//                       </option>\n//                     ))}\n//                   </Form.Select>\n//                 </Col>\n\n//                 {/* Seguro médico */}\n//                 <Col md>\n//                   <Form.Select\n//                     name=\"seguro_medico\"\n//                     value={filters.seguro_medico}\n//                     onChange={handleFilterChange}\n//                     className=\"stylish-select\"\n//                   >\n//                     <option value=\"\">-- Seguro médico --</option>\n//                     {seguros.map((sg) => (\n//                       <option key={sg} value={sg}>\n//                         {sg}\n//                       </option>\n//                     ))}\n//                   </Form.Select>\n//                 </Col>\n\n//                 <Col md=\"auto\">\n//                   <Button type=\"submit\" disabled={loading}>\n//                     {loading ? (\n//                       <Spinner animation=\"border\" size=\"sm\" />\n//                     ) : (\n//                       \"Buscar\"\n//                     )}\n//                   </Button>\n//                 </Col>\n//               </Row>\n//             </Form>\n\n//             <Row className=\"mt-4 g-3\">\n//               {doctors.map((doc) => (\n//                 <Col key={doc.id_usuario} xs={12} md={6} lg={4}>\n//                   <Card className=\"h-100\">\n//                     <Card.Body>\n//                       <Card.Title>{doc.nombre}</Card.Title>\n//                       <Card.Text>\n//                         <strong>Especialidad:</strong>{\" \"}\n//                         {doc.PerfilMedico?.especialidad}\n//                         <br />\n//                         <strong>Ubicación:</strong>{\" \"}\n//                         {doc.PerfilMedico?.ubicacion}\n//                       </Card.Text>\n\n//                       {/* slots disponibles */}\n//                       <div style={{ maxHeight: 120, overflowY: \"auto\" }}>\n//                         {slotsByDoctor[doc.id_usuario]?.length > 0 ? (\n//                           slotsByDoctor[doc.id_usuario].map((slot) => (\n//                             <div\n//                               key={slot}\n//                               className=\"d-flex justify-content-between align-items-center mb-1\"\n//                             >\n//                               <small>{new Date(slot).toLocaleString()}</small>\n//                               <Button\n//                                 size=\"sm\"\n//                                 onClick={() => openModal(doc, slot)}\n//                               >\n//                                 Reservar\n//                               </Button>\n//                             </div>\n//                           ))\n//                         ) : (\n//                           <p className=\"text-muted\">\n//                             No hay horarios disponibles\n//                           </p>\n//                         )}\n//                       </div>\n//                     </Card.Body>\n//                   </Card>\n//                 </Col>\n//               ))}\n//             </Row>\n\n//             {/* Modal de agendamiento */}\n//             <Modal show={showModal} onHide={() => setShowModal(false)}>\n//               <Modal.Header closeButton>\n//                 <Modal.Title>Agendar con {selectedDoctor?.nombre}</Modal.Title>\n//               </Modal.Header>\n//               <Modal.Body>\n//                 <Form.Group className=\"mb-3\">\n//                   <Form.Label>Fecha y hora</Form.Label>\n//                   <Form.Control\n//                     type=\"text\"\n//                     readOnly\n//                     value={new Date(fechaHora).toLocaleString()}\n//                   />\n//                 </Form.Group>\n//                 <Form.Group className=\"mb-3\">\n//                   <Form.Label>Método de notificación</Form.Label>\n//                   <Form.Select\n//                     value={notiMethod}\n//                     onChange={(e) => setNotiMethod(e.target.value)}\n//                   >\n//                     <option value=\"email\">Email</option>\n//                     <option value=\"sms\">SMS</option>\n//                     <option value=\"push\">Push</option>\n//                   </Form.Select>\n//                 </Form.Group>\n//               </Modal.Body>\n//               <Modal.Footer>\n//                 <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n//                   Cancelar\n//                 </Button>\n//                 <Button variant=\"primary\" onClick={handleAppointment}>\n//                   Confirmar Cita\n//                 </Button>\n//               </Modal.Footer>\n//             </Modal>\n//           </Container>\n//         </div>\n//         <Footer />\n//       </div>\n//     </>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/dae01/Documents/Universidad/QuickCita/frontend/src/pages/Dashboard.js"],"sourcesContent":["// import React, { useState, useContext, useEffect } from \"react\";\r\n// import { AuthContext } from \"../context/AuthContext\";\r\n// import { searchDoctors } from \"../services/doctorService\";\r\n// import {\r\n//   createAppointment,\r\n//   getAvailableSlots,\r\n// } from \"../services/appointmentService\";\r\n// import { getPerfilFilters } from \"../services/filterService\";\r\n// import AppNavbar from \"../components/Navbar\";\r\n// import Footer from \"../components/Footer\";\r\n// import \"../App.css\";\r\n// import {\r\n//   Container,\r\n//   Form,\r\n//   Row,\r\n//   Col,\r\n//   Card,\r\n//   Button,\r\n//   Spinner,\r\n//   Modal,\r\n// } from \"react-bootstrap\";\r\n\r\n// export default function Dashboard() {\r\n//   const { user } = useContext(AuthContext);\r\n\r\n//   // Filtros seleccionados\r\n//   const [filters, setFilters] = useState({\r\n//     especialidad: \"\",\r\n//     ubicacion: \"\",\r\n//     seguro_medico: \"\",\r\n//   });\r\n\r\n//   // Listas dinámicas de filtros\r\n//   const [especialidades, setEspecialidades] = useState([]);\r\n//   const [ubicaciones, setUbicaciones] = useState([]);\r\n//   const [seguros, setSeguros] = useState([]);\r\n\r\n//   // Resultados de búsqueda\r\n//   const [doctors, setDoctors] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n//   // Slots disponibles por médico\r\n//   const [slotsByDoctor, setSlotsByDoctor] = useState({});\r\n\r\n//   // Modal de agendamiento\r\n//   const [showModal, setShowModal] = useState(false);\r\n//   const [selectedDoctor, setSelectedDoctor] = useState(null);\r\n//   const [fechaHora, setFechaHora] = useState(\"\");\r\n//   const [notiMethod, setNotiMethod] = useState(\"email\");\r\n\r\n//   // Cargar valores de filtros desde el backend\r\n//   useEffect(() => {\r\n//     getPerfilFilters()\r\n//       .then(({ especialidades: esp, ubicaciones: ubi, seguros: seg }) => {\r\n//         setEspecialidades(esp);\r\n//         setUbicaciones(ubi);\r\n//         setSeguros(seg);\r\n//       })\r\n//       .catch((err) => console.error(\"Error cargando filtros:\", err));\r\n//   }, []);\r\n\r\n//   const handleFilterChange = (e) => {\r\n//     setFilters((f) => ({ ...f, [e.target.name]: e.target.value }));\r\n//   };\r\n\r\n//   const handleSearch = async (e) => {\r\n//     e.preventDefault();\r\n//     setLoading(true);\r\n//     try {\r\n//       const docs = await searchDoctors(filters);\r\n//       setDoctors(docs);\r\n\r\n//       // cargar slots para cada doctor\r\n//       const slotsMap = {};\r\n//       await Promise.all(\r\n//         docs.map(async (doc) => {\r\n//           const slots = await getAvailableSlots(doc.id_usuario);\r\n//           slotsMap[doc.id_usuario] = slots;\r\n//         })\r\n//       );\r\n//       setSlotsByDoctor(slotsMap);\r\n//     } catch (err) {\r\n//       console.error(\"Error buscando médicos:\", err);\r\n//       alert(err.message || \"Error al buscar médicos\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const openModal = (doctor, slot) => {\r\n//     setSelectedDoctor(doctor);\r\n//     setFechaHora(slot);\r\n//     setShowModal(true);\r\n//   };\r\n\r\n//   const handleAppointment = async () => {\r\n//     if (!fechaHora) {\r\n//       alert(\"Por favor selecciona fecha y hora\");\r\n//       return;\r\n//     }\r\n//     try {\r\n//       await createAppointment({\r\n//         id_paciente: user.id_usuario,\r\n//         id_medico: selectedDoctor.id_usuario,\r\n//         fecha_hora: fechaHora,\r\n//         metodo_notificacion: notiMethod,\r\n//         seguro_medico: selectedDoctor.PerfilMedico?.seguro_medico || \"\",\r\n//       });\r\n//       alert(\"Cita agendada con éxito\");\r\n//       setShowModal(false);\r\n//     } catch (err) {\r\n//       console.error(\"Error agendando cita:\", err);\r\n//       alert(err.message || \"Error al agendar cita\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"app-layout\">\r\n//         <AppNavbar />\r\n//         <div className=\"app-content\">\r\n//           <Container className=\"py-5 d-flex flex-column\">\r\n//             <Form onSubmit={handleSearch}>\r\n//               <Row className=\"g-3\">\r\n//                 {/* Especialidad */}\r\n//                 <Col md>\r\n//                   <Form.Select\r\n//                     name=\"especialidad\"\r\n//                     value={filters.especialidad}\r\n//                     onChange={handleFilterChange}\r\n//                     className=\"stylish-select\"  \r\n//                   >\r\n//                     <option value=\"\">-- Especialidad --</option>\r\n//                     {especialidades.map((sp) => (\r\n//                       <option key={sp} value={sp}>\r\n//                         {sp}\r\n//                       </option>\r\n//                     ))}\r\n//                   </Form.Select>\r\n//                 </Col>\r\n\r\n//                 {/* Ubicación */}\r\n//                 <Col md>\r\n//                   <Form.Select\r\n//                     name=\"ubicacion\"\r\n//                     value={filters.ubicacion}\r\n//                     onChange={handleFilterChange}\r\n//                     className=\"stylish-select\"\r\n//                   >\r\n//                     <option value=\"\">-- Ubicación --</option>\r\n//                     {ubicaciones.map((loc) => (\r\n//                       <option key={loc} value={loc}>\r\n//                         {loc}\r\n//                       </option>\r\n//                     ))}\r\n//                   </Form.Select>\r\n//                 </Col>\r\n\r\n//                 {/* Seguro médico */}\r\n//                 <Col md>\r\n//                   <Form.Select\r\n//                     name=\"seguro_medico\"\r\n//                     value={filters.seguro_medico}\r\n//                     onChange={handleFilterChange}\r\n//                     className=\"stylish-select\"\r\n//                   >\r\n//                     <option value=\"\">-- Seguro médico --</option>\r\n//                     {seguros.map((sg) => (\r\n//                       <option key={sg} value={sg}>\r\n//                         {sg}\r\n//                       </option>\r\n//                     ))}\r\n//                   </Form.Select>\r\n//                 </Col>\r\n\r\n//                 <Col md=\"auto\">\r\n//                   <Button type=\"submit\" disabled={loading}>\r\n//                     {loading ? (\r\n//                       <Spinner animation=\"border\" size=\"sm\" />\r\n//                     ) : (\r\n//                       \"Buscar\"\r\n//                     )}\r\n//                   </Button>\r\n//                 </Col>\r\n//               </Row>\r\n//             </Form>\r\n\r\n//             <Row className=\"mt-4 g-3\">\r\n//               {doctors.map((doc) => (\r\n//                 <Col key={doc.id_usuario} xs={12} md={6} lg={4}>\r\n//                   <Card className=\"h-100\">\r\n//                     <Card.Body>\r\n//                       <Card.Title>{doc.nombre}</Card.Title>\r\n//                       <Card.Text>\r\n//                         <strong>Especialidad:</strong>{\" \"}\r\n//                         {doc.PerfilMedico?.especialidad}\r\n//                         <br />\r\n//                         <strong>Ubicación:</strong>{\" \"}\r\n//                         {doc.PerfilMedico?.ubicacion}\r\n//                       </Card.Text>\r\n\r\n//                       {/* slots disponibles */}\r\n//                       <div style={{ maxHeight: 120, overflowY: \"auto\" }}>\r\n//                         {slotsByDoctor[doc.id_usuario]?.length > 0 ? (\r\n//                           slotsByDoctor[doc.id_usuario].map((slot) => (\r\n//                             <div\r\n//                               key={slot}\r\n//                               className=\"d-flex justify-content-between align-items-center mb-1\"\r\n//                             >\r\n//                               <small>{new Date(slot).toLocaleString()}</small>\r\n//                               <Button\r\n//                                 size=\"sm\"\r\n//                                 onClick={() => openModal(doc, slot)}\r\n//                               >\r\n//                                 Reservar\r\n//                               </Button>\r\n//                             </div>\r\n//                           ))\r\n//                         ) : (\r\n//                           <p className=\"text-muted\">\r\n//                             No hay horarios disponibles\r\n//                           </p>\r\n//                         )}\r\n//                       </div>\r\n//                     </Card.Body>\r\n//                   </Card>\r\n//                 </Col>\r\n//               ))}\r\n//             </Row>\r\n\r\n//             {/* Modal de agendamiento */}\r\n//             <Modal show={showModal} onHide={() => setShowModal(false)}>\r\n//               <Modal.Header closeButton>\r\n//                 <Modal.Title>Agendar con {selectedDoctor?.nombre}</Modal.Title>\r\n//               </Modal.Header>\r\n//               <Modal.Body>\r\n//                 <Form.Group className=\"mb-3\">\r\n//                   <Form.Label>Fecha y hora</Form.Label>\r\n//                   <Form.Control\r\n//                     type=\"text\"\r\n//                     readOnly\r\n//                     value={new Date(fechaHora).toLocaleString()}\r\n//                   />\r\n//                 </Form.Group>\r\n//                 <Form.Group className=\"mb-3\">\r\n//                   <Form.Label>Método de notificación</Form.Label>\r\n//                   <Form.Select\r\n//                     value={notiMethod}\r\n//                     onChange={(e) => setNotiMethod(e.target.value)}\r\n//                   >\r\n//                     <option value=\"email\">Email</option>\r\n//                     <option value=\"sms\">SMS</option>\r\n//                     <option value=\"push\">Push</option>\r\n//                   </Form.Select>\r\n//                 </Form.Group>\r\n//               </Modal.Body>\r\n//               <Modal.Footer>\r\n//                 <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\r\n//                   Cancelar\r\n//                 </Button>\r\n//                 <Button variant=\"primary\" onClick={handleAppointment}>\r\n//                   Confirmar Cita\r\n//                 </Button>\r\n//               </Modal.Footer>\r\n//             </Modal>\r\n//           </Container>\r\n//         </div>\r\n//         <Footer />\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}