{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dae01\\\\Documents\\\\Universidad\\\\QuickCita\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\n// import React, { createContext, useReducer } from \"react\";\n// import { loginUser, logoutUser } from \"../services/authService\";\n// import { jwtDecode } from \"jwt-decode\";\n// import api from \"../services/api\";\n\n// const initialState = {\n//   isAuthenticated: !!localStorage.getItem(\"token\"),\n//   user: null,\n// };\n\n// const authReducer = (state, action) => {\n//   switch (action.type) {\n//     case \"LOGIN_SUCCESS\":\n//       return { ...state, isAuthenticated: true, user: action.payload };\n//     case \"LOGOUT\":\n//       return { ...state, isAuthenticated: false, user: null };\n//     default:\n//       return state;\n//   }\n// };\n\n// export const AuthContext = createContext(initialState);\n\n// export const AuthProvider = ({ children }) => {\n//   const [state, dispatch] = useReducer(authReducer, initialState);\n\n//   const handleLogin = async (credentials) => {\n//     try {\n//       const { token } = await loginUser(credentials);\n//       localStorage.setItem(\"token\", token);\n\n//       // Decodificamos el JWT para extraer id_usuario y rol\n//       const decoded = jwtDecode(token);\n//       const id_usuario = decoded.id_usuario;\n\n//       const perfilResponse = await api.get(`/usuarios/profile/${id_usuario}`, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n\n//       const perfil = perfilResponse.data;\n\n//       console.log(perfil);\n//       // decoded tiene { id_usuario, rol, iat, exp }\n//       dispatch({ type: \"LOGIN_SUCCESS\", payload: perfil });\n//       return perfil; // Retornamos el usuario decodificado\n//     } catch (err) {\n//       console.error(\"Error al iniciar sesión:\", err);\n//       throw err;\n//     }\n//   };\n\n//   const handleLogout = () => {\n//     logoutUser();\n//     dispatch({ type: \"LOGOUT\" });\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ ...state, handleLogin, handleLogout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// frontend/src/context/AuthContext.js\nimport React, { createContext, useReducer, useEffect } from \"react\";\nimport { loginUser, logoutUser } from \"../services/authService\";\nimport { jwtDecode } from \"jwt-decode\";\nimport api from \"../services/api\";\nimport socket from \"../socket\"; // tu cliente de socket.io\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  isAuthenticated: !!localStorage.getItem(\"token\"),\n  user: null\n};\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case \"LOGIN_SUCCESS\":\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload\n      };\n    case \"LOGOUT\":\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null\n      };\n    default:\n      return state;\n  }\n};\nexport const AuthContext = /*#__PURE__*/createContext(initialState);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Cuando cambie el user, (des)conectamos el socket\n  useEffect(() => {\n    var _state$user;\n    if ((_state$user = state.user) !== null && _state$user !== void 0 && _state$user.id_usuario) {\n      // Configurar token si lo necesitas en el handshake\n      socket.auth = {\n        token: localStorage.getItem(\"token\")\n      };\n      socket.connect();\n      socket.emit(\"joinRoom\", `user_${state.user.id_usuario}`);\n    }\n    return () => {\n      socket.disconnect();\n    };\n  }, [state.user]);\n  const handleLogin = async credentials => {\n    try {\n      const {\n        token\n      } = await loginUser(credentials);\n      localStorage.setItem(\"token\", token);\n\n      // Decodificar JWT para extraer id y rol\n      const decoded = jwtDecode(token);\n      const {\n        id_usuario\n      } = decoded;\n\n      // Obtener perfil completo\n      const perfilRes = await api.get(`/usuarios/profile/${id_usuario}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const perfil = perfilRes.data;\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: perfil\n      });\n      return perfil;\n    } catch (err) {\n      console.error(\"Error al iniciar sesión:\", err);\n      throw err;\n    }\n  };\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    logoutUser(); // si tu service limpia algo en el backend\n    dispatch({\n      type: \"LOGOUT\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated: state.isAuthenticated,\n      user: state.user,\n      handleLogin,\n      handleLogout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useEffect","loginUser","logoutUser","jwtDecode","api","socket","jsxDEV","_jsxDEV","initialState","isAuthenticated","localStorage","getItem","user","authReducer","state","action","type","payload","AuthContext","AuthProvider","children","_s","dispatch","_state$user","id_usuario","auth","token","connect","emit","disconnect","handleLogin","credentials","setItem","decoded","perfilRes","get","headers","Authorization","perfil","data","err","console","error","handleLogout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dae01/Documents/Universidad/QuickCita/frontend/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useReducer } from \"react\";\r\n// import { loginUser, logoutUser } from \"../services/authService\";\r\n// import { jwtDecode } from \"jwt-decode\";\r\n// import api from \"../services/api\";\r\n\r\n// const initialState = {\r\n//   isAuthenticated: !!localStorage.getItem(\"token\"),\r\n//   user: null,\r\n// };\r\n\r\n// const authReducer = (state, action) => {\r\n//   switch (action.type) {\r\n//     case \"LOGIN_SUCCESS\":\r\n//       return { ...state, isAuthenticated: true, user: action.payload };\r\n//     case \"LOGOUT\":\r\n//       return { ...state, isAuthenticated: false, user: null };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export const AuthContext = createContext(initialState);\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n//   const handleLogin = async (credentials) => {\r\n//     try {\r\n//       const { token } = await loginUser(credentials);\r\n//       localStorage.setItem(\"token\", token);\r\n\r\n//       // Decodificamos el JWT para extraer id_usuario y rol\r\n//       const decoded = jwtDecode(token);\r\n//       const id_usuario = decoded.id_usuario;\r\n\r\n//       const perfilResponse = await api.get(`/usuarios/profile/${id_usuario}`, {\r\n//         headers: { Authorization: `Bearer ${token}` },\r\n//       });\r\n\r\n//       const perfil = perfilResponse.data;\r\n\r\n//       console.log(perfil);\r\n//       // decoded tiene { id_usuario, rol, iat, exp }\r\n//       dispatch({ type: \"LOGIN_SUCCESS\", payload: perfil });\r\n//       return perfil; // Retornamos el usuario decodificado\r\n//     } catch (err) {\r\n//       console.error(\"Error al iniciar sesión:\", err);\r\n//       throw err;\r\n//     }\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     logoutUser();\r\n//     dispatch({ type: \"LOGOUT\" });\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ ...state, handleLogin, handleLogout }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// frontend/src/context/AuthContext.js\r\nimport React, { createContext, useReducer, useEffect } from \"react\";\r\nimport { loginUser, logoutUser } from \"../services/authService\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport api from \"../services/api\";\r\nimport socket from \"../socket\";  // tu cliente de socket.io\r\n\r\nconst initialState = {\r\n  isAuthenticated: !!localStorage.getItem(\"token\"),\r\n  user: null,\r\n};\r\n\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"LOGIN_SUCCESS\":\r\n      return { ...state, isAuthenticated: true, user: action.payload };\r\n    case \"LOGOUT\":\r\n      return { ...state, isAuthenticated: false, user: null };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const AuthContext = createContext(initialState);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  // Cuando cambie el user, (des)conectamos el socket\r\n  useEffect(() => {\r\n    if (state.user?.id_usuario) {\r\n      // Configurar token si lo necesitas en el handshake\r\n      socket.auth = { token: localStorage.getItem(\"token\") };\r\n      socket.connect();\r\n      socket.emit(\"joinRoom\", `user_${state.user.id_usuario}`);\r\n    }\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, [state.user]);\r\n\r\n  const handleLogin = async (credentials) => {\r\n    try {\r\n      const { token } = await loginUser(credentials);\r\n      localStorage.setItem(\"token\", token);\r\n\r\n      // Decodificar JWT para extraer id y rol\r\n      const decoded = jwtDecode(token);\r\n      const { id_usuario } = decoded;\r\n\r\n      // Obtener perfil completo\r\n      const perfilRes = await api.get(\r\n        `/usuarios/profile/${id_usuario}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      const perfil = perfilRes.data;\r\n\r\n      dispatch({ type: \"LOGIN_SUCCESS\", payload: perfil });\r\n      return perfil;\r\n    } catch (err) {\r\n      console.error(\"Error al iniciar sesión:\", err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    logoutUser(); // si tu service limpia algo en el backend\r\n    dispatch({ type: \"LOGOUT\" });\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        isAuthenticated: state.isAuthenticated,\r\n        user: state.user,\r\n        handleLogin,\r\n        handleLogout\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}